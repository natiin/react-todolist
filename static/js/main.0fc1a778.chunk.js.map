{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["NewTodoForm","props","state","task","handleSubmit","bind","handleChange","e","preventDefault","this","id","uuidv4","completed","createTask","setState","target","value","className","onSubmit","htmlFor","type","name","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTask","updateTask","toggleTask","onClick","ToDoList","tasks","create","remove","update","toggleCompletion","newTask","prevState","filter","updatedTask","updatedTasks","map","el","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fc1a778.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport \"./NewToDoForm.css\";\r\n\r\nclass NewTodoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { task: \"\" };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    const task = { ...this.state, id: uuidv4(), completed: false };\r\n\r\n    this.props.createTask(task);\r\n    this.setState({ task: \"\" });\r\n  }\r\n  handleChange(e) {\r\n    this.setState({\r\n      task: e.target.value,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"NewToDoForm-container\" onSubmit={this.handleSubmit}>\r\n        <label htmlFor=\"task\"></label>\r\n        <input type=\"text\" id=\"task\" name=\"task\" value={this.state.task} onChange={this.handleChange}></input>\r\n        <button>\r\n          <i className=\"bi bi-plus-square-fill\"></i>\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTodoForm;\r\n","import React, { Component } from \"react\";\r\nimport \"./Todo.css\";\r\nclass Todo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isEditing: false,\r\n      task: this.props.task,\r\n    };\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.toggleForm = this.toggleForm.bind(this);\r\n    this.handleUpdate = this.handleUpdate.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n  }\r\n  handleRemove() {\r\n    this.props.removeTask(this.props.id);\r\n  }\r\n  toggleForm() {\r\n    this.setState({ isEditing: !this.state.isEditing });\r\n  }\r\n  handleUpdate(e) {\r\n    e.preventDefault();\r\n    this.props.updateTask(this.props.id, this.state.task);\r\n    this.setState({ isEditing: false });\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({\r\n      task: e.target.value,\r\n    });\r\n  }\r\n  handleToggle(e) {\r\n    this.props.toggleTask(this.props.id);\r\n  }\r\n  render() {\r\n    let result;\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <div className=\"Todo-edit-form\">\r\n          <form onSubmit={this.handleUpdate}>\r\n            <input onChange={this.handleChange} type=\"text\" name=\"task\" value={this.state.task} />\r\n            <button>save</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    } else {\r\n      result = (\r\n        <div className=\"Todo-container\">\r\n          <li className={this.props.completed ? \"Todo-container-completed\" : \"\"} onClick={this.handleToggle}>\r\n            {this.props.task}\r\n          </li>\r\n          <button onClick={this.handleRemove}>\r\n            <i className=\"bi bi-trash\"></i>\r\n          </button>\r\n          <button onClick={this.toggleForm}>\r\n            <i className=\"bi bi-pencil\"></i>\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport \"./ToDoList.css\";\r\n\r\nclass ToDoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { tasks: [] };\r\n    this.create = this.create.bind(this);\r\n    this.remove = this.remove.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.toggleCompletion = this.toggleCompletion.bind(this);\r\n  }\r\n\r\n  create(task) {\r\n    const newTask = { ...task };\r\n    if (!newTask.task) return;\r\n    this.setState((prevState) => ({\r\n      tasks: [...prevState.tasks, newTask],\r\n    }));\r\n  }\r\n  remove(id) {\r\n    this.setState({\r\n      tasks: this.state.tasks.filter((task) => task.id !== id),\r\n    });\r\n  }\r\n  update(id, updatedTask) {\r\n    const updatedTasks = this.state.tasks.map((task) => {\r\n      if (task.id === id) {\r\n        return { ...task, task: updatedTask };\r\n      }\r\n      return task;\r\n    });\r\n    this.setState({ tasks: updatedTasks });\r\n  }\r\n  toggleCompletion(id) {\r\n    const updatedTasks = this.state.tasks.map((task) => {\r\n      if (task.id === id) {\r\n        return { ...task, completed: !task.completed };\r\n      }\r\n      return task;\r\n    });\r\n    this.setState({ tasks: updatedTasks });\r\n  }\r\n  render() {\r\n    const tasks = this.state.tasks.map((el) => {\r\n      return <Todo task={el.task} key={el.id} id={el.id} removeTask={this.remove} updateTask={this.update} completed={el.completed} toggleTask={this.toggleCompletion} />;\r\n    });\r\n    return (\r\n      <div className=\"ToDoList-container\">\r\n        <h1>\r\n          <span className=\"ToDoList-container-heading\">to do list</span>\r\n        </h1>\r\n        <NewTodoForm createTask={this.create} />\r\n        <ul className=\"ToDoList-list\">{tasks}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoList;\r\n","import \"./App.css\";\nimport ToDoList from \"./TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ToDoList />\n      <p>\n        Photo by <a href=\"https://unsplash.com/@maxsaeling?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Max Saeling</a> on <a href=\"https://unsplash.com/s/photos/to-do?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}